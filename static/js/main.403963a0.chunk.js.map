{"version":3,"sources":["Components/Modal.js","Components/TaskForm.js","Components/SearchTask.js","Components/TaskRow.js","Components/sortHandle.js","Components/FilterItem.js","Components/TaskTable.js","Components/TaskManager.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","props","type","message","btnElement","data-toggle","data-target","className","tabIndex","id","data-dismiss","aria-label","aria-hidden","onClick","onRemove","TaskForm","removeTaskHandle","onRemoveTask","state","task","name","status","trash","isValid","onSubmitHandle","bind","handleChange","event","this","filedName","target","value","setState","handelValidation","preventDefault","trim","onSubmit","removeBtn","discardBtn","onCloseTaskForm","htmlFor","placeholder","onChange","React","Component","SearchTask","aria-describedby","e","onSearch","TaskRow","no","editTask","colSpan","ascendingSort","a","b","aValue","toLowerCase","bValue","descendingSort","sortHandle","tasks","order","sort","FilterItem","itemTitle","TaskTable","searchText","filterText","filterMenuElements","title","map","item","filterHandle","Rows","length","processedTasks","indexOf","filter","idx","style","background","aria-haspopup","aria-expanded","aria-labelledby","TaskManager","toggleTaskForm","action","isDisplayForm","taskEditing","onSearchTask","onEditTask","slice","index","findIndex","localStorage","setItem","JSON","stringify","deleteAllTasks","removeItem","getItem","parse","datas","data","Object","assign","splice","uuidv4","push","taskFormElement","elemFormTask","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.403963a0.chunk.js","sourcesContent":["function Modal(props) {\r\n    const {type, message} = props;\r\n    const removeAllBtn = (<span \r\n                            type=\"button\" \r\n                            data-toggle=\"modal\" data-target=\"#myModal\"\r\n                            // className=\"btn btn-danger float-right\"\r\n                        >\r\n                            Remove all taks\r\n                        </span>);\r\n    const removeBtn = (<button \r\n                            type=\"button\" \r\n                            data-toggle=\"modal\" data-target=\"#myModal\"\r\n                            className=\"btn btn-danger float-right\"\r\n                        >\r\n                            {type}\r\n                        </button>);\r\n                   \r\n    const btnElement = type === 'Remove All' ? '' : removeBtn;\r\n    return(\r\n        <div>\r\n            {btnElement}\r\n            <div className=\"modal\" tabIndex=\"-1\" id=\"myModal\">\r\n                <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\">Remove Tasks</h5>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                        <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <p>{message}</p>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"btn btn-default\" data-dismiss=\"modal\">Discard</button>\r\n                        <button type=\"button\" className=\"btn btn-danger\" \r\n                            data-dismiss=\"modal\"\r\n                            onClick={props.onRemove}\r\n                        >\r\n                            Yes\r\n                        </button>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React from \"react\";\r\nimport Modal from \"./Modal\";\r\n\r\nclass TaskForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            task: {\r\n                id: '',\r\n                name: '',\r\n                status: 'todo',\r\n                trash: false,\r\n            },\r\n            isValid: true\r\n        };\r\n        this.onSubmitHandle = this.onSubmitHandle.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        return ({task: props.task})\r\n    }\r\n\r\n    handleChange(event) {\r\n        const {task} = this.state;\r\n        const filedName = event.target.name;\r\n        const value = event.target.value;\r\n        task[filedName] = value;\r\n        this.setState({task : task},() => {\r\n            this.handelValidation();\r\n        }\r\n        );  \r\n    }\r\n\r\n    onSubmitHandle(event) {\r\n        const {task} = this.state;\r\n        event.preventDefault();\r\n        this.handelValidation();\r\n        if (task.name.trim()) {\r\n            this.props.onSubmit(task);\r\n        }\r\n        if (!task.id) {\r\n            task.name = '';\r\n            task.status = 'todo';\r\n            this.setState({task :task})\r\n        }\r\n    }\r\n\r\n    removeTaskHandle = () => {\r\n        this.props.onRemoveTask(this.state.task)\r\n    }\r\n\r\n    handelValidation() {\r\n        const {task} = this.state;\r\n        if (!task.name.trim()) {\r\n            this.setState({isValid : false});\r\n        } else {\r\n            this.setState({isValid : true});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {task, isValid} = this.state;\r\n        const {name, status, id} = task;\r\n        const removeBtn = <Modal \r\n                            type={'Remove'} \r\n                            message={'Are you sure you want to remove this task?'} \r\n                            onRemove={this.removeTaskHandle}                               \r\n                          />;\r\n        const discardBtn = <button \r\n                                type=\"submit\" \r\n                                className=\"btn btn-default float-right\" \r\n                                onClick={this.props.onCloseTaskForm}>\r\n                                Discard\r\n                            </button>;\r\n        const btnElement = id ? removeBtn : discardBtn;\r\n\r\n        return (\r\n          <div className=\"card card-primary\">\r\n              <div className=\"card-header\">\r\n                  <i className=\"fa fa-times\" aria-hidden=\"true\" onClick={this.props.onCloseTaskForm}></i>\r\n                  <h3 className=\"card-title\">{id ? 'Edit Task' : 'Add New Task'}</h3>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                  <form onSubmit={this.onSubmitHandle}>\r\n                      <div className=\"form-group\">\r\n                          <label htmlFor=\"name\">Name</label>\r\n                          <input \r\n                                type=\"text\" \r\n                                className={`form-control ${!isValid ? 'border-danger' : ''}`} id=\"taskName\" \r\n                                name=\"name\" placeholder=\"Task name\" \r\n                                value={name}\r\n                                onChange={this.handleChange}\r\n                                \r\n                          />\r\n                          <span className={`form-check-label ${!isValid ? 'text-danger' : 'd-none'}`}>\r\n                            Please fill out this field\r\n                          </span>\r\n                      </div>\r\n                      <div className=\"form-group\">\r\n                          <label htmlFor=\"taskStatus\">Status</label>\r\n                          <select \r\n                            className=\"form-control\" name=\"status\" id=\"taskStatus\"\r\n                            onChange={this.handleChange}\r\n                            value={status}\r\n                          >\r\n                            <option value=\"todo\">To do</option>\r\n                            <option value=\"inprogress\">Inprogress</option>\r\n                            <option value=\"completed\">Completed</option>\r\n                            {/* <option value=\"removed\">Removed</option> */}\r\n                          </select>\r\n                      </div>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-6 col-md-6 col-lg-6\">\r\n                            <button type=\"submit\" className=\"btn btn-primary mr-4\">{id ? 'Save' : 'Add'}</button>\r\n                        </div>\r\n                        <div className=\"col-6 col-md-6 col-lg-6\">\r\n                            {btnElement}\r\n                        </div>\r\n                      </div>\r\n                  </form>\r\n              </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskForm;\r\n","\r\n\r\nfunction SearchTask(props) {\r\n  return (\r\n    <div className=\"input-group mb-3\">\r\n        <input type=\"text\" className=\"form-control\" placeholder=\"Search\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\" \r\n          value={props.value}\r\n          onChange={(e) => props.onSearch(e)}\r\n        />\r\n        <div className=\"input-group-append\">\r\n        <button className=\"btn btn-outline-secondary\" type=\"button\">\r\n            <i className=\"fa fa-search\" aria-hidden=\"true\"></i>\r\n        </button>\r\n        </div>\r\n    </div> \r\n  );\r\n}\r\n\r\nexport default SearchTask;\r\n","\r\nfunction TaskRow(props) {\r\n    const {task} = props;\r\n    // if (!task || task.trash)\r\n    if (!task) {\r\n        return (\r\n            <tr>\r\n                <td colSpan=\"4\">{props.message}</td>\r\n            </tr>\r\n        )\r\n    } else {\r\n        const no = props.no + 1;\r\n        const {name, id} = task;\r\n        let status;\r\n        switch (task.status) {\r\n            case 'inprogress':\r\n                status = <span className=\"badge badge-primary\">Inprogress</span>;\r\n                break;\r\n            case 'completed':\r\n                status = <span className=\"badge badge-success\">Completed</span>;\r\n                break;\r\n            case 'removed':\r\n                status = <span className=\"badge badge-warning\">Removed</span>;\r\n                break;\r\n            default:\r\n                status = <span className=\"badge badge-secondary\">To do</span>;\r\n        }\r\n        return (\r\n            <tr>\r\n                <td>{no}</td>\r\n                <td className=\"task-name\">\r\n                    {name}\r\n                </td>\r\n                <td className=\"text-center\">\r\n                    {status}\r\n                </td>\r\n                <td className=\"text-center\" onClick={() => props.editTask(id)}>\r\n                    <i className=\"fa fa-pencil\" aria-hidden=\"true\"></i>\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TaskRow;","function sortHandle(tasks,order) {\r\n    if (order === 1) {\r\n        return tasks.sort(ascendingSort) \r\n    } else if (order === 0) {\r\n        return tasks.sort(descendingSort)\r\n    }\r\n    return tasks;\r\n}\r\n\r\nfunction ascendingSort(a, b) {\r\n    const aValue = a.name.toLowerCase();\r\n    const bValue = b.name.toLowerCase();\r\n    return aValue > bValue ? 1 : aValue < bValue ? -1 : 0;\r\n}\r\n\r\nfunction descendingSort(a, b) {\r\n    const aValue = a.name.toLowerCase();\r\n    const bValue = b.name.toLowerCase();\r\n    return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\r\n}\r\nexport default sortHandle;","export default function FilterItem(props) {\r\n\r\n    return (\r\n        <span className=\"dropdown-item\" onClick={props.onClick}>{props.itemTitle}</span>\r\n    )\r\n}","import TaskRow from \"./TaskRow\";\r\nimport sortHandle from \"./sortHandle\";\r\nimport FilterItem from \"./FilterItem\";\r\n\r\nfunction TaskTable(props) {\r\n    const {tasks, searchText, order, filterText} = props;\r\n    const filterList = [\r\n                            {title:'All', value: 'all'},\r\n                            {title:'To do', value: 'todo'},\r\n                            {title:'Inprogress', value: 'inprogress'},\r\n                            {title:'Completed', value: 'completed'},\r\n                            {title:'Removed', value: 'removed'},\r\n                        ];\r\n    const filterMenuElements = filterList.map(item => {\r\n        return <FilterItem key={item.value} itemTitle={item.title} onClick={() => props.filterHandle(item.value)}/>\r\n    });\r\n    let Rows = <TaskRow task={''} message={'No tasks available'}/>;\r\n    if (tasks.length > 0) {\r\n        let processedTasks = tasks.map((task) => {\r\n            if (task.trash && filterText !== 'removed' && searchText === '') {\r\n                return -1;\r\n            }\r\n            if (filterText !== 'all' && task.status !== filterText && searchText === '') {\r\n                return -1;\r\n            }\r\n            if (task.name.toLowerCase().indexOf(searchText) === -1) {\r\n                return -1;\r\n            }\r\n            return task;\r\n        });\r\n        processedTasks = processedTasks.filter(task => task !== -1);\r\n        processedTasks = sortHandle(processedTasks, order);\r\n        \r\n        Rows = processedTasks.map((task, idx) => {\r\n            return (<TaskRow \r\n                        key={task.id} \r\n                        task={task} no={idx} \r\n                        editTask={(id) => props.editTask(id)}                   \r\n                    />);\r\n        });\r\n        if (Rows.length === 0) {\r\n            Rows = <TaskRow task={''} message={'No results found'}/>;\r\n        }\r\n    }\r\n    return (\r\n        <table className=\"table table-bordered table-hover task-table\">\r\n            <thead style={{background: \"#75e7ad\"}} className=\"text-center\">\r\n                <tr>\r\n                    <th>No</th>\r\n                    <th>\r\n                        Taks Name\r\n                        <div className=\"dropdown d-inline float-right\">\r\n                            <span className=\"dropdown-toggle\" id=\"dLabel\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"></span>\r\n                            <div className=\"dropdown-menu\" aria-labelledby=\"dLabel\">\r\n                            <span className=\"dropdown-item\" onClick={() => props.sortHandle(1)}>\r\n                                <i className=\"fa fa-sort-alpha-asc\" aria-hidden=\"true\"></i>\r\n                                &nbsp;Ascending\r\n                            </span>\r\n                            <span className=\"dropdown-item\" onClick={() => props.sortHandle(0)}>\r\n                                <i className=\"fa fa-sort-alpha-desc\" aria-hidden=\"true\"></i>\r\n                                &nbsp;Descending\r\n                            </span>\r\n                            </div>\r\n                        </div>\r\n                    </th>\r\n                    <th>\r\n                        Status\r\n                        <div className=\"dropdown d-inline float-right\">\r\n                            <span className=\"dropdown-toggle\" id=\"dLabel2\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"></span>\r\n                            <div className=\"dropdown-menu\" aria-labelledby=\"dLabel2\">\r\n                                {filterMenuElements}\r\n                            </div>\r\n                        </div>\r\n                    </th>\r\n                    <th>Edit</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {Rows}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default TaskTable;","\r\nimport React from 'react';\r\nimport TaskForm from './TaskForm';\r\nimport SearchTask from './SearchTask';\r\nimport TaskTable from './TaskTable';\r\nimport Modal from './Modal';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { findIndex } from 'lodash';\r\n\r\n\r\nclass TaskManager extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tasks: [],\r\n            isDisplayForm: false,\r\n            searchText: '',\r\n            filterText: 'all',\r\n            order: null,\r\n            taskEditing: {\r\n                id: '',\r\n                name: '',\r\n                status: 'todo',\r\n                trash: false,\r\n            }\r\n        };\r\n        this.onSubmitHandle = this.onSubmitHandle.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        let tasks;\r\n        if (localStorage && localStorage.getItem('tasks')) {\r\n            tasks = JSON.parse(localStorage.getItem('tasks'));\r\n        } else {\r\n            tasks = datas;\r\n        }\r\n        this.setState({tasks: tasks});\r\n    }\r\n\r\n    onSubmitHandle(data) {\r\n        const task = Object.assign({}, data);\r\n        const {id, trash} = task;\r\n        const {tasks} = this.state;\r\n        if (trash) {\r\n            task.trash = false;\r\n        }\r\n        if (id) {\r\n            const index = findIndex(tasks, {id: id});\r\n            tasks.splice(index, 1, task);\r\n        } else {\r\n            task.id = uuidv4();\r\n            tasks.push(task);\r\n        }\r\n        this.setState(() => ({\r\n            tasks: tasks,\r\n            filterText: 'all'\r\n        }));\r\n        localStorage.setItem('tasks', JSON.stringify(this.state.tasks));\r\n    }\r\n\r\n    toggleTaskForm = (action) => {\r\n        const {isDisplayForm} = this.state;\r\n        if (action === 'add' || action === 'edit') {\r\n            this.setState({isDisplayForm: true});\r\n        } else {\r\n            this.setState(\r\n                {\r\n                    isDisplayForm: !isDisplayForm,\r\n                    taskEditing: {\r\n                        id: '',\r\n                        name: '',\r\n                        status: 'todo',\r\n                        trash: false,\r\n                    }              \r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    onSearchTask = (e) => {\r\n        const searchText = e.target.value.toLowerCase();\r\n        this.setState({searchText: searchText});\r\n    }\r\n\r\n    onEditTask = (id) => {\r\n        this.toggleTaskForm('edit');\r\n        const tasks = this.state.tasks.slice();\r\n        const index = findIndex(tasks, {id: id});\r\n        this.setState({taskEditing: tasks[index]});\r\n    }\r\n\r\n    sortHandle = (value) => {\r\n        this.setState({order: value});\r\n    }\r\n\r\n    filterHandle = (value) => {\r\n        this.setState({filterText: value});\r\n    }\r\n\r\n    removeTaskHandle = (task) => {\r\n        const {tasks} = this.state\r\n        const id = task.id;\r\n        const index = findIndex(tasks, {id: id});\r\n        tasks[index].trash = true;\r\n        tasks[index].status = 'removed';\r\n        localStorage.setItem('tasks', JSON.stringify(this.state.tasks));\r\n        this.setState({\r\n            tasks: tasks,\r\n            isDisplayForm: false,\r\n            taskEditing: {\r\n                id: '',\r\n                name: '',\r\n                status: 'todo',\r\n                trash: false,\r\n            }\r\n        });\r\n    }\r\n\r\n    deleteAllTasks = () => {\r\n        this.setState(() => ({tasks: []}))\r\n        localStorage.removeItem('tasks');\r\n    }\r\n\r\n    render() {\r\n        const {tasks, taskEditing, isDisplayForm, order, searchText, filterText} = this.state;\r\n        const taskFormElement = <TaskForm \r\n                                    onSubmit={this.onSubmitHandle} \r\n                                    onCloseTaskForm={this.toggleTaskForm} \r\n                                    onRemoveTask={this.removeTaskHandle} \r\n                                    task={taskEditing}\r\n                                /> \r\n        const elemFormTask = isDisplayForm ? taskFormElement : '';\r\n\r\n        return (\r\n            <div className=\"container-fluid mt-3\">\r\n                <div>\r\n                    <h1 className=\"text-center\">Tasks Manager</h1><hr />\r\n                </div>            \r\n                <div className=\"row\">\r\n                    <div className={isDisplayForm ? \"col-xs-4 col-sm-4 col-md-4 col-lg-4\" : \"\"}>\r\n                        {/* {TASK FORM} */} \r\n                        {elemFormTask}\r\n                    </div>\r\n                    <div className={isDisplayForm ? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\" : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"}>\r\n                        <div className=\"row mb-3\">\r\n                            <div className=\"col-6 col-md-6 col-lg-6\">\r\n                                <button \r\n                                    type=\"button\" \r\n                                    className={isDisplayForm ? \"invisible\" : \"btn btn-primary\"}\r\n                                    onClick={() => this.toggleTaskForm('add')}\r\n                                >\r\n                                    <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\r\n                                    &nbsp;Add Tasks\r\n                                </button>        \r\n                            </div>\r\n                            <div className=\"col-6 col-md-6 col-lg-6\">\r\n                                <Modal \r\n                                    onRemove={this.deleteAllTasks} \r\n                                    type={'Remove All'}\r\n                                    message={'All tasks will be erased permenantly.'}\r\n                                />\r\n                                <div className=\"bar-menu-container d-inline float-right\">\r\n                                    <i className=\"fa fa-bars\"></i>\r\n                                    <div className=\"bar-menu\">\r\n                                        <span className=\"bar-item\" type=\"button\" data-toggle=\"modal\" data-target=\"#myModal\">\r\n                                            Remove all taks                                    \r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                                {/* {SEARCH TASKS} */}\r\n                                <SearchTask value={this.state.searchText} onSearch={this.onSearchTask}/>         \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n                                {/* {TABLE TASKS} */}\r\n                                <TaskTable \r\n                                    tasks={tasks}\r\n                                    order={order}\r\n                                    filterText={filterText}\r\n                                    searchText={searchText}\r\n                                    sortHandle={this.sortHandle}\r\n                                    filterHandle={this.filterHandle}\r\n                                    editTask={this.onEditTask}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>       \r\n        )\r\n    }\r\n}\r\n\r\nconst datas = [\r\n                {name: \"Playing soccer\", status: \"todo\", trash: false, id: \"5b0658a2-af54-4c86-b82a-7d99bfd74878\"},\r\n                {name: \"Walking\", status: \"inprogress\", trash: false, id: \"ca275d65-7362-4fb4-8f0b-82055c06c9ee\"},\r\n                {name: \"Coding\", status: \"completed\", trash: false, id: \"47cfe1a8-8b2a-4d51-a037-c4a7691145d9\"},\r\n                {name: \"Gaming\", status: \"removed\", trash: true, id: \"47cfe1a8-8b2a-4d51-a037-c4a7691145dd\"},\r\n            ];\r\n\r\nexport default TaskManager;","\nimport './App.css';\nimport TaskManager from './Components/TaskManager';\n\nfunction App() {\n  return (\n    <TaskManager />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}