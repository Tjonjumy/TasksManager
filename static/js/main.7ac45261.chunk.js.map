{"version":3,"sources":["Components/Modal.js","Components/TaskForm.js","Components/SearchTask.js","Components/TaskRow.js","Components/sortHandle.js","Components/TaskTable.js","Components/TaskManager.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","props","type","data-toggle","data-target","className","tabIndex","id","data-dismiss","aria-label","aria-hidden","message","onClick","onRemove","TaskForm","state","task","name","status","trash","isValid","onSubmitHandle","bind","handleChange","event","this","filedName","target","value","setState","handelValidation","console","log","preventDefault","trim","onSubmit","onCloseTaskForm","htmlFor","placeholder","onChange","deleteAllTasks","React","Component","SearchTask","aria-describedby","e","onSearch","TaskRow","colSpan","no","editTask","ascendingSort","a","b","aValue","toLowerCase","bValue","descendingSort","sortHandle","tasks","order","sort","TaskTable","searchText","Rows","length","processedTasks","map","indexOf","filter","idx","style","background","aria-haspopup","aria-expanded","aria-labelledby","TaskManager","toggleTaskForm","action","isDisplayForm","onSearchTask","onEditTask","slice","index","findIndex","removeTaskHandle","localStorage","removeItem","filterText","getItem","JSON","parse","datas","splice","uuidv4","push","setItem","stringify","elemFormTask","onRemoveTask","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ac45261.chunk.js","sourcesContent":["function Modal(props) {\r\n    \r\n    return(\r\n        <div>\r\n            <button \r\n                type=\"button\" \r\n                data-toggle=\"modal\" data-target=\"#myModal\"\r\n                className=\"btn btn-danger float-right\"\r\n            >\r\n                {props.type}\r\n            </button>\r\n        <div className=\"modal\" tabIndex=\"-1\" id=\"myModal\">\r\n            <div className=\"modal-dialog\">\r\n                <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\">Remove Tasks</h5>\r\n                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                    </button>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    <p>{props.message}</p>\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                    <button type=\"button\" className=\"btn btn-default\" data-dismiss=\"modal\">Discard</button>\r\n                    <button type=\"button\" className=\"btn btn-danger\" \r\n                        data-dismiss=\"modal\"\r\n                        onClick={props.onRemove}\r\n                    >\r\n                        Yes\r\n                    </button>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React from \"react\";\r\nimport Modal from \"./Modal\";\r\n\r\nclass TaskForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            task: {\r\n                id: '',\r\n                name: '',\r\n                status: 'todo',\r\n                trash: false,\r\n            },\r\n            isValid: true\r\n        };\r\n        this.onSubmitHandle = this.onSubmitHandle.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        return ({task: props.task})\r\n    }\r\n\r\n    handleChange(event) {\r\n        const {task} = this.state;\r\n        const filedName = event.target.name;\r\n        const value = event.target.value;\r\n        task[filedName] = value;\r\n        this.setState({task : task},() => {\r\n            this.handelValidation();\r\n        }\r\n        );  \r\n    }\r\n\r\n    onSubmitHandle(event) {\r\n        const {task} = this.state;\r\n        console.log(task)\r\n        event.preventDefault();\r\n        this.handelValidation();\r\n        if (task.name.trim()) {\r\n            this.props.onSubmit(task);\r\n        }\r\n        if (!task.id) {\r\n            task.name = '';\r\n            task.status = 'todo';\r\n            this.setState({task :task})\r\n        }\r\n    }\r\n\r\n    onRemoveHandle() {\r\n\r\n    }\r\n\r\n    handelValidation() {\r\n        const {task} = this.state;\r\n        if (!task.name.trim()) {\r\n            this.setState({isValid : false});\r\n        } else {\r\n            this.setState({isValid : true});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {task, isValid} = this.state;\r\n        const {name, status} = task;\r\n        return (\r\n          <div className=\"card card-primary\">\r\n              <div className=\"card-header\">\r\n                  <i className=\"fa fa-times\" aria-hidden=\"true\" onClick={this.props.onCloseTaskForm}></i>\r\n                  <h3 className=\"card-title\">Add Task</h3>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                  <form onSubmit={this.onSubmitHandle}>\r\n                      <div className=\"form-group\">\r\n                          <label htmlFor=\"name\">Name</label>\r\n                          <input \r\n                                type=\"text\" \r\n                                className={`form-control ${!isValid ? 'border-danger' : ''}`} id=\"taskName\" \r\n                                name=\"name\" placeholder=\"Task name\" \r\n                                value={name}\r\n                                onChange={this.handleChange}\r\n                                \r\n                          />\r\n                          <span className={`form-check-label ${!isValid ? 'text-danger' : 'd-none'}`}>\r\n                            Please fill out this field\r\n                          </span>\r\n                      </div>\r\n                      <div className=\"form-group\">\r\n                          <label htmlFor=\"taskStatus\">Status</label>\r\n                          <select \r\n                            className=\"form-control\" name=\"status\" id=\"taskStatus\"\r\n                            onChange={this.handleChange}\r\n                            value={status}\r\n                          >\r\n                            <option value=\"todo\">Todo</option>\r\n                            <option value=\"inprogress\">Inprogress</option>\r\n                            <option value=\"completed\">Completed</option>\r\n                            <option value=\"removed\">Removed</option>\r\n                          </select>\r\n                      </div>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-md-6 col-lg-6\">\r\n                            <button type=\"submit\" className=\"btn btn-primary mr-4\">Save</button>\r\n\r\n                        </div>\r\n                        <div className=\"col-md-6 col-lg-6\">\r\n                            <Modal \r\n                                onRemove={this.deleteAllTasks} \r\n                                type={'Remove'}\r\n                                message={'Are you sure you want to remove this task?'}\r\n                            />\r\n                        </div>\r\n                      </div>\r\n                      {/* <button type=\"button\" className=\"btn btn-default\" onClick={this.onRemoveHandle}>Remove</button> */}\r\n                  </form>\r\n              </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskForm;\r\n","\r\n\r\nfunction SearchTask(props) {\r\n  return (\r\n    <div className=\"input-group mb-3\">\r\n        <input type=\"text\" className=\"form-control\" placeholder=\"Search\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\" \r\n          value={props.value}\r\n          onChange={(e) => props.onSearch(e)}\r\n        />\r\n        <div className=\"input-group-append\">\r\n        <button className=\"btn btn-outline-secondary\" type=\"button\">\r\n            <i className=\"fa fa-search\" aria-hidden=\"true\"></i>\r\n        </button>\r\n        </div>\r\n    </div> \r\n  );\r\n}\r\n\r\nexport default SearchTask;\r\n","\r\nfunction TaskRow(props) {\r\n    const {task} = props;\r\n    if (!task || task.trash) {\r\n        return (\r\n            <tr>\r\n                <td colSpan=\"4\">{props.message}</td>\r\n            </tr>\r\n        )\r\n    } else {\r\n        const no = props.no + 1;\r\n        const {name, id} = task;\r\n        let status;\r\n        switch (task.status) {\r\n            case 'inprogress':\r\n                status = <span className=\"badge badge-primary\">Inprogress</span>;\r\n                break;\r\n            case 'completed':\r\n                status = <span className=\"badge badge-success\">Completed</span>;\r\n                break;\r\n            case 'removed':\r\n                status = <span className=\"badge badge-warning\">Removed</span>;\r\n                break;\r\n            default:\r\n                status = <span className=\"badge badge-secondary\">Todo</span>;\r\n        }\r\n        return (\r\n            <tr>\r\n                <td>{no}</td>\r\n                <td className=\"task-name\">\r\n                    {name}\r\n                </td>\r\n                <td className=\"text-center\">\r\n                    {status}\r\n                </td>\r\n                <td className=\"text-center\" onClick={() => props.editTask(id)}>\r\n                    <i className=\"fa fa-pencil\" aria-hidden=\"true\"></i>\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TaskRow;","function sortHandle(tasks,order) {\r\n    if (order === 1) {\r\n        return tasks.sort(ascendingSort) \r\n    } else if (order === 0) {\r\n        return tasks.sort(descendingSort)\r\n    }\r\n    return tasks;\r\n}\r\n\r\nfunction ascendingSort(a, b) {\r\n    const aValue = a.name.toLowerCase();\r\n    const bValue = b.name.toLowerCase();\r\n    return aValue > bValue ? 1 : aValue < bValue ? -1 : 0;\r\n}\r\n\r\nfunction descendingSort(a, b) {\r\n    const aValue = a.name.toLowerCase();\r\n    const bValue = b.name.toLowerCase();\r\n    return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\r\n}\r\nexport default sortHandle;","import TaskRow from \"./TaskRow\";\r\nimport sortHandle from \"./sortHandle\";\r\n\r\nfunction TaskTable(props) {\r\n\r\n    const {tasks, searchText, order} = props;\r\n    let Rows = <TaskRow task={''} message={'No tasks available'}/>;\r\n    if (tasks.length > 0) {\r\n        let processedTasks = tasks.map((task) => {\r\n            if (task.trash) {\r\n                return -1;\r\n            }\r\n            if (task.name.toLowerCase().indexOf(searchText) === -1) {\r\n                return -1;\r\n            }\r\n            return task;\r\n        });\r\n        processedTasks = processedTasks.filter(task => task !== -1);\r\n        processedTasks = sortHandle(processedTasks, order);\r\n        \r\n        Rows = processedTasks.map((task, idx) => {\r\n            return <TaskRow \r\n                key={task.id} \r\n                task={task} no={idx} \r\n                editTask={(id) => props.editTask(id)}                   \r\n                />\r\n        });\r\n        if (Rows.length === 0) {\r\n            Rows = <TaskRow task={''} message={'No results found'}/>;\r\n        }\r\n    }\r\n    return (\r\n        <table className=\"table table-bordered table-hover task-table\">\r\n            <thead style={{background: \"#75e7ad\"}}>\r\n                <tr>\r\n                    <th>No</th>\r\n                    <th>\r\n                        Taks Name\r\n                        <div className=\"dropdown d-inline float-right\">\r\n                            <span className=\"dropdown-toggle\" id=\"dLabel\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"></span>\r\n                            <div className=\"dropdown-menu\" aria-labelledby=\"dLabel\">\r\n                            <span className=\"dropdown-item\" onClick={() => props.sortHandle(1)}>\r\n                                <i className=\"fa fa-sort-alpha-asc\" aria-hidden=\"true\"></i>\r\n                                &nbsp;Ascending\r\n                            </span>\r\n                            <span className=\"dropdown-item\" onClick={() => props.sortHandle(0)}>\r\n                                <i className=\"fa fa-sort-alpha-desc\" aria-hidden=\"true\"></i>\r\n                                &nbsp;Descending\r\n                            </span>\r\n                            </div>\r\n                        </div>\r\n                    </th>\r\n                    <th>\r\n                        Status\r\n                        <div className=\"dropdown d-inline float-right\">\r\n                            <span className=\"dropdown-toggle\" id=\"dLabel2\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"></span>\r\n                            <div className=\"dropdown-menu\" aria-labelledby=\"dLabel2\">\r\n                                <span className=\"dropdown-item\" type=\"span\">All</span>\r\n                                <span className=\"dropdown-item\" type=\"span\">To do</span>\r\n                                <span className=\"dropdown-item\" type=\"span\">Inprogress</span>\r\n                                <span className=\"dropdown-item\" type=\"span\">Completed</span>\r\n                                <span className=\"dropdown-item\" type=\"span\">Removed</span>\r\n                            </div>\r\n                        </div>\r\n                    </th>\r\n                    <th>Edit</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {Rows}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default TaskTable;","\r\nimport React from 'react';\r\nimport TaskForm from './TaskForm';\r\nimport SearchTask from './SearchTask';\r\nimport TaskTable from './TaskTable';\r\nimport Modal from './Modal';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { findIndex } from 'lodash';\r\n\r\n\r\nclass TaskManager extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tasks: [],\r\n            isDisplayForm: false,\r\n            searchText: '',\r\n            filterText: 'all',\r\n            order: null,\r\n            task: {\r\n                id: '',\r\n                name: '',\r\n                status: 'todo',\r\n                trash: false,\r\n            }\r\n        };\r\n        this.onSubmitHandle = this.onSubmitHandle.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        let tasks;\r\n        if (localStorage && localStorage.getItem('tasks')) {\r\n            tasks = JSON.parse(localStorage.getItem('tasks'));\r\n        } else {\r\n            tasks = datas;\r\n        }\r\n        this.setState({tasks: tasks});\r\n    }\r\n\r\n    onSubmitHandle(task) {\r\n        console.log(task)\r\n        const {id} = task;\r\n        const {tasks} = this.state;\r\n        if (id) {\r\n            const index = findIndex(tasks, {id: id});\r\n            tasks.splice(index, 1, task);\r\n        } else {\r\n            task.id = uuidv4();\r\n            tasks.push(task);\r\n        }\r\n        this.setState(() => ({\r\n            tasks: tasks\r\n        }));\r\n        localStorage.setItem('tasks', JSON.stringify(this.state.tasks));\r\n    }\r\n\r\n    toggleTaskForm = (action) => {\r\n        const {isDisplayForm} = this.state;\r\n        if (action === 'add' || action === 'edit') {\r\n            this.setState({isDisplayForm: true});\r\n        } else {\r\n            this.setState(\r\n                {\r\n                    isDisplayForm: !isDisplayForm,\r\n                    task: {\r\n                        id: '',\r\n                        name: '',\r\n                        status: 'todo',\r\n                        trash: false,\r\n                    }\r\n                \r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    onSearchTask = (e) => {\r\n        const searchText = e.target.value.toLowerCase();\r\n        this.setState({searchText: searchText});\r\n    }\r\n\r\n    onEditTask = (id) => {\r\n        this.toggleTaskForm('edit');\r\n        const tasks = this.state.tasks.slice();\r\n        const index = findIndex(tasks, {id: id});\r\n        this.setState({task: tasks[index]});\r\n    }\r\n\r\n    sortHandle = (value) => {\r\n        this.setState({order: value});\r\n    }\r\n\r\n    removeTaskHandle = (task) => {\r\n        // const {tasks} = this.state\r\n        // const id = task.id;\r\n        // const index = findIndex(tasks, {id: id});\r\n        // tasks[index].trash = true;\r\n        // this.setState({tasks: tasks});\r\n    }\r\n\r\n    deleteAllTasks = () => {\r\n        this.setState(() => ({tasks: []}))\r\n        localStorage.removeItem('tasks');\r\n    }\r\n\r\n    render() {\r\n        const {tasks, task, isDisplayForm, order, searchText} = this.state;\r\n        const elemFormTask = isDisplayForm ? \r\n            <TaskForm onSubmit={this.onSubmitHandle} onCloseTaskForm={this.toggleTaskForm} onRemoveTask={this.removeTaskHandle} task={task}/> : '';\r\n\r\n        return (\r\n            <div className=\"container-fluid mt-3\">\r\n                <div>\r\n                    <h1 className=\"text-center\">Tasks Manager</h1><hr />\r\n                </div>            \r\n                <div className=\"row\">\r\n                <div className={isDisplayForm ? \"col-xs-4 col-sm-4 col-md-4 col-lg-4\" : \"\"}>\r\n                    {/* {TASK FORM} */} \r\n                    {elemFormTask}\r\n                </div>\r\n                <div className={isDisplayForm ? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\" : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                            {/* {SEARCH TASKS} */}\r\n                            <SearchTask value={this.state.searchText} onSearch={this.onSearchTask}/>         \r\n                        </div>\r\n                        <div className=\"col-md-3 col-lg-3\">\r\n                            <button type=\"button\" className={isDisplayForm ? \"invisible\" : \"btn btn-primary float-right\"}\r\n                                onClick={() => this.toggleTaskForm('add')}\r\n                            >\r\n                            <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\r\n                            &nbsp;Add Tasks\r\n                            </button>        \r\n                        </div>\r\n                        <div className=\"col-md-3 col-lg-3\">\r\n                            <Modal \r\n                                onRemove={this.deleteAllTasks} \r\n                                type={'Remove All'}\r\n                                message={'Are you sure you want to remove all tasks?'}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                    <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n                        {/* {TABLE TASKS} */}\r\n                        <TaskTable \r\n                            tasks={tasks}\r\n                            order={order}\r\n                            searchText={searchText}\r\n                            sortHandle={this.sortHandle}\r\n                            editTask={this.onEditTask}\r\n                        />\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </div>       \r\n        )\r\n    }\r\n}\r\n\r\nconst datas = [\r\n                {name: \"Playing soccer\", status: \"todo\", trash: false, id: \"5b0658a2-af54-4c86-b82a-7d99bfd74878\"},\r\n                {name: \"Walking\", status: \"inprogress\", trash: false, id: \"ca275d65-7362-4fb4-8f0b-82055c06c9ee\"},\r\n                {name: \"Coding\", status: \"todo\", trash: false, id: \"47cfe1a8-8b2a-4d51-a037-c4a7691145d9\"},\r\n            ];\r\n\r\nexport default TaskManager;","\nimport './App.css';\nimport TaskManager from './Components/TaskManager';\n\nfunction App() {\n  return (\n    <TaskManager />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}